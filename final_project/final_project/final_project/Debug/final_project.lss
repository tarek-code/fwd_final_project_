
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  00000580  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001317  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a58  00000000  00000000  00001a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c0b  00000000  00000000  000024c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  000030d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000775  00000000  00000000  00003440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b90  00000000  00000000  00003bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004745  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_1>
   8:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_2>
   c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
  74:	0c 94 84 02 	jmp	0x508	; 0x508 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_Configure_Channel>:
 *      Author: lione
 */
#include "Dio_Interface.h"
void Dio_Configure_Channel(dio_port_t port,dio_pin_t pin,dio_direction_t direction)
{
	switch (port)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	01 f1       	breq	.+64     	; 0xc0 <Dio_Configure_Channel+0x44>
  80:	30 f0       	brcs	.+12     	; 0x8e <Dio_Configure_Channel+0x12>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	b1 f1       	breq	.+108    	; 0xf2 <Dio_Configure_Channel+0x76>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	09 f4       	brne	.+2      	; 0x8c <Dio_Configure_Channel+0x10>
  8a:	4c c0       	rjmp	.+152    	; 0x124 <Dio_Configure_Channel+0xa8>
  8c:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction==DIO_INPUT)
  8e:	41 11       	cpse	r20, r1
  90:	0c c0       	rjmp	.+24     	; 0xaa <Dio_Configure_Channel+0x2e>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
  92:	2a b3       	in	r18, 0x1a	; 26
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <Dio_Configure_Channel+0x22>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <Dio_Configure_Channel+0x1e>
  a2:	80 95       	com	r24
  a4:	82 23       	and	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
		}
	else {
		SIT_BIT(DIO_DDRA_REG,pin);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <Dio_Configure_Channel+0x3a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <Dio_Configure_Channel+0x36>
  ba:	82 2b       	or	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
	}
	break;
	case DIO_PORTB:
			if (direction==DIO_INPUT)
  c0:	41 11       	cpse	r20, r1
  c2:	0c c0       	rjmp	.+24     	; 0xdc <Dio_Configure_Channel+0x60>
			{
				CLEAR_BIT(DIO_DDRB_REG,pin);
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <Dio_Configure_Channel+0x54>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <Dio_Configure_Channel+0x50>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
			}
		else {
			SIT_BIT(DIO_DDRB_REG,pin);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <Dio_Configure_Channel+0x6c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <Dio_Configure_Channel+0x68>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
		}
		break;
	case DIO_PORTC:
			if (direction==DIO_INPUT)
  f2:	41 11       	cpse	r20, r1
  f4:	0c c0       	rjmp	.+24     	; 0x10e <Dio_Configure_Channel+0x92>
			{
				CLEAR_BIT(DIO_DDRC_REG,pin);
  f6:	24 b3       	in	r18, 0x14	; 20
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <Dio_Configure_Channel+0x86>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <Dio_Configure_Channel+0x82>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	84 bb       	out	0x14, r24	; 20
 10c:	08 95       	ret
			}
		else {
			SIT_BIT(DIO_DDRC_REG,pin);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <Dio_Configure_Channel+0x9e>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <Dio_Configure_Channel+0x9a>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
		}
		break;
	case DIO_PORTD:
			if (direction==DIO_INPUT)
 124:	41 11       	cpse	r20, r1
 126:	0c c0       	rjmp	.+24     	; 0x140 <Dio_Configure_Channel+0xc4>
			{
				CLEAR_BIT(DIO_DDRD_REG,pin);
 128:	21 b3       	in	r18, 0x11	; 17
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <Dio_Configure_Channel+0xb8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <Dio_Configure_Channel+0xb4>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
			}
		else {
			SIT_BIT(DIO_DDRD_REG,pin);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <Dio_Configure_Channel+0xd0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <Dio_Configure_Channel+0xcc>
 150:	82 2b       	or	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret

00000156 <Dio_Write_Channel>:



void Dio_Write_Channel(dio_port_t port,dio_pin_t pin,dio_level_t level)
{
	switch(port)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	01 f1       	breq	.+64     	; 0x19a <Dio_Write_Channel+0x44>
 15a:	30 f0       	brcs	.+12     	; 0x168 <Dio_Write_Channel+0x12>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	b1 f1       	breq	.+108    	; 0x1cc <Dio_Write_Channel+0x76>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	09 f4       	brne	.+2      	; 0x166 <Dio_Write_Channel+0x10>
 164:	4c c0       	rjmp	.+152    	; 0x1fe <Dio_Write_Channel+0xa8>
 166:	08 95       	ret
{
case DIO_PORTA:
		if (level==DIO_LOW)
 168:	41 11       	cpse	r20, r1
 16a:	0c c0       	rjmp	.+24     	; 0x184 <Dio_Write_Channel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
 16c:	2b b3       	in	r18, 0x1b	; 27
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <Dio_Write_Channel+0x22>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <Dio_Write_Channel+0x1e>
 17c:	80 95       	com	r24
 17e:	82 23       	and	r24, r18
 180:	8b bb       	out	0x1b, r24	; 27
 182:	08 95       	ret
		}
	else {
		SIT_BIT(DIO_PORTA_REG,pin);
 184:	2b b3       	in	r18, 0x1b	; 27
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <Dio_Write_Channel+0x3a>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <Dio_Write_Channel+0x36>
 194:	82 2b       	or	r24, r18
 196:	8b bb       	out	0x1b, r24	; 27
 198:	08 95       	ret
	}
	break;
case DIO_PORTB:
		if (level==DIO_LOW)
 19a:	41 11       	cpse	r20, r1
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <Dio_Write_Channel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
 19e:	28 b3       	in	r18, 0x18	; 24
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Dio_Write_Channel+0x54>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <Dio_Write_Channel+0x50>
 1ae:	80 95       	com	r24
 1b0:	82 23       	and	r24, r18
 1b2:	88 bb       	out	0x18, r24	; 24
 1b4:	08 95       	ret
		}
	else {
		SIT_BIT(DIO_PORTB_REG,pin);
 1b6:	28 b3       	in	r18, 0x18	; 24
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <Dio_Write_Channel+0x6c>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <Dio_Write_Channel+0x68>
 1c6:	82 2b       	or	r24, r18
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	08 95       	ret
	}
	break;
case DIO_PORTC:
		if (level==DIO_LOW)
 1cc:	41 11       	cpse	r20, r1
 1ce:	0c c0       	rjmp	.+24     	; 0x1e8 <Dio_Write_Channel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
 1d0:	25 b3       	in	r18, 0x15	; 21
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <Dio_Write_Channel+0x86>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <Dio_Write_Channel+0x82>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	85 bb       	out	0x15, r24	; 21
 1e6:	08 95       	ret
		}
	else {
		SIT_BIT(DIO_PORTC_REG,pin);
 1e8:	25 b3       	in	r18, 0x15	; 21
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <Dio_Write_Channel+0x9e>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <Dio_Write_Channel+0x9a>
 1f8:	82 2b       	or	r24, r18
 1fa:	85 bb       	out	0x15, r24	; 21
 1fc:	08 95       	ret
	}
	break;
case DIO_PORTD:
		if (level==DIO_LOW)
 1fe:	41 11       	cpse	r20, r1
 200:	0c c0       	rjmp	.+24     	; 0x21a <Dio_Write_Channel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
 202:	22 b3       	in	r18, 0x12	; 18
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <Dio_Write_Channel+0xb8>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <Dio_Write_Channel+0xb4>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	82 bb       	out	0x12, r24	; 18
 218:	08 95       	ret
		}
	else {
		SIT_BIT(DIO_PORTD_REG,pin);
 21a:	22 b3       	in	r18, 0x12	; 18
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <Dio_Write_Channel+0xd0>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <Dio_Write_Channel+0xcc>
 22a:	82 2b       	or	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <__vector_1>:
	break;
}
}

ISR(INT0_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
if(EXT_INT0!=NULL)
 252:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXT_INT0>
 256:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXT_INT0+0x1>
 25a:	30 97       	sbiw	r30, 0x00	; 0
 25c:	09 f0       	breq	.+2      	; 0x260 <__vector_1+0x30>
{
EXT_INT0();
 25e:	09 95       	icall
}
else
{
//do nothing
}
}
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_2>:


ISR(INT1_vect)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
if(EXT_INT1!=NULL)
 2a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <EXT_INT1>
 2a8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <EXT_INT1+0x1>
 2ac:	89 2b       	or	r24, r25
 2ae:	49 f0       	breq	.+18     	; 0x2c2 <__vector_2+0x40>
{
EXT_INT0();
 2b0:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXT_INT0>
 2b4:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXT_INT0+0x1>
 2b8:	09 95       	icall
EXT_INT1=NULL;
 2ba:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <EXT_INT1+0x1>
 2be:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <EXT_INT1>
}
else
{
//do nothing
}
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <__vector_3>:


ISR(INT2_vect)
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	4f 93       	push	r20
 2f4:	5f 93       	push	r21
 2f6:	6f 93       	push	r22
 2f8:	7f 93       	push	r23
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	af 93       	push	r26
 300:	bf 93       	push	r27
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
if(EXT_INT2!=NULL)
 306:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 30a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 30e:	89 2b       	or	r24, r25
 310:	49 f0       	breq	.+18     	; 0x324 <__vector_3+0x40>
{
EXT_INT0();
 312:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXT_INT0>
 316:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXT_INT0+0x1>
 31a:	09 95       	icall
EXT_INT2=NULL;
 31c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 320:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
}
else
{
//do nothing
}
}
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__vector_11>:
	CLEAR_BIT(TCCR0_REG,2);
}


ISR(TIMER0_OVF_vect)
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	2f 93       	push	r18
 352:	3f 93       	push	r19
 354:	4f 93       	push	r20
 356:	5f 93       	push	r21
 358:	6f 93       	push	r22
 35a:	7f 93       	push	r23
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
if(Timer0_INT0!=NULL)
 368:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <Timer0_INT0>
 36c:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <Timer0_INT0+0x1>
 370:	30 97       	sbiw	r30, 0x00	; 0
 372:	e9 f1       	breq	.+122    	; 0x3ee <__vector_11+0xa8>
{

if(check_no==1)
 374:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <check_no>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	f1 f4       	brne	.+60     	; 0x3b8 <__vector_11+0x72>
{

	if(tot_overflow==no_of_ovf){
 37c:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <tot_overflow>
 380:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <tot_overflow+0x1>
 384:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <no_of_ovf>
 388:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <no_of_ovf+0x1>
 38c:	28 17       	cp	r18, r24
 38e:	39 07       	cpc	r19, r25
 390:	49 f4       	brne	.+18     	; 0x3a4 <__vector_11+0x5e>


		Timer0_INT0();
 392:	09 95       	icall
			  tot_overflow=0;
 394:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <tot_overflow+0x1>
 398:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <tot_overflow>


			//  TCNT0=256-rem;

			  Timer0_INT0=NULL;
 39c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Timer0_INT0+0x1>
 3a0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Timer0_INT0>
	}
	tot_overflow++;
 3a4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tot_overflow>
 3a8:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <tot_overflow+0x1>
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <tot_overflow+0x1>
 3b2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <tot_overflow>
 3b6:	1b c0       	rjmp	.+54     	; 0x3ee <__vector_11+0xa8>
}

else if(check_no==2)
 3b8:	82 30       	cpi	r24, 0x02	; 2
 3ba:	c9 f4       	brne	.+50     	; 0x3ee <__vector_11+0xa8>

{
	if(tot_overflow==(u8)no_of_ovf){
 3bc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <no_of_ovf>
 3c0:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <no_of_ovf+0x1>
 3c4:	99 27       	eor	r25, r25
 3c6:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <tot_overflow>
 3ca:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <tot_overflow+0x1>
 3ce:	82 17       	cp	r24, r18
 3d0:	93 07       	cpc	r25, r19
 3d2:	69 f4       	brne	.+26     	; 0x3ee <__vector_11+0xa8>


			Timer0_INT0();
 3d4:	09 95       	icall
				  tot_overflow=0;
 3d6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <tot_overflow+0x1>
 3da:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <tot_overflow>


				  TCNT0=256-rem;
 3de:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <rem>
 3e2:	81 95       	neg	r24
 3e4:	82 bf       	out	0x32, r24	; 50

				  Timer0_INT0=NULL;
 3e6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Timer0_INT0+0x1>
 3ea:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Timer0_INT0>
}
else
{
//do nothing
}
}
 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	bf 91       	pop	r27
 3f4:	af 91       	pop	r26
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	7f 91       	pop	r23
 3fc:	6f 91       	pop	r22
 3fe:	5f 91       	pop	r21
 400:	4f 91       	pop	r20
 402:	3f 91       	pop	r19
 404:	2f 91       	pop	r18
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <WDT_Int>:
	SIT_BIT(WDTCR_REG,3);

}

void WDT_Refresh()
{
 410:	81 b5       	in	r24, 0x21	; 33
 412:	88 60       	ori	r24, 0x08	; 8
 414:	81 bd       	out	0x21, r24	; 33
 416:	08 95       	ret

00000418 <WDT_Start>:
}

void WDT_Start()
{
		//Watchdog Timer Prescaler 2, 1, and 0 to be 2.1 sec
		SIT_BIT(WDTCR_REG,0);
 418:	81 b5       	in	r24, 0x21	; 33
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	81 bd       	out	0x21, r24	; 33
		SIT_BIT(WDTCR_REG,1);
 41e:	81 b5       	in	r24, 0x21	; 33
 420:	82 60       	ori	r24, 0x02	; 2
 422:	81 bd       	out	0x21, r24	; 33
		SIT_BIT(WDTCR_REG,2);
 424:	81 b5       	in	r24, 0x21	; 33
 426:	84 60       	ori	r24, 0x04	; 4
 428:	81 bd       	out	0x21, r24	; 33
 42a:	08 95       	ret

0000042c <Led_Init>:
 *      Author: lione
 */
#include "Led_Interface.h"
void Led_Init()
{
	Dio_Configure_Channel(DIO_PORTC, LED0_PIN, DIO_OUTPUT);
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	62 e0       	ldi	r22, 0x02	; 2
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_Configure_Channel>
	Dio_Configure_Channel(LED1_PORT, LED1_PIN, DIO_OUTPUT);
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	67 e0       	ldi	r22, 0x07	; 7
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_Configure_Channel>
	Dio_Configure_Channel(LED2_PORT, LED2_PIN, DIO_OUTPUT);
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	63 e0       	ldi	r22, 0x03	; 3
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_Configure_Channel>

	Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	62 e0       	ldi	r22, 0x02	; 2
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_Write_Channel>
	Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_LOW);
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	67 e0       	ldi	r22, 0x07	; 7
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_Write_Channel>
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	63 e0       	ldi	r22, 0x03	; 3
 462:	83 e0       	ldi	r24, 0x03	; 3
 464:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_Write_Channel>
 468:	08 95       	ret

0000046a <Led_ON>:
}
void Led_ON(led_id_t led)
{
	switch (led) {
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	51 f0       	breq	.+20     	; 0x482 <Led_ON+0x18>
 46e:	18 f0       	brcs	.+6      	; 0x476 <Led_ON+0xc>
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	69 f0       	breq	.+26     	; 0x48e <Led_ON+0x24>
 474:	08 95       	ret
	case LED0:
#if(LED0_CONNECTION==SOURCE)
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_HIGH);
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	62 e0       	ldi	r22, 0x02	; 2
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_Write_Channel>
#else
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
#endif
		break;
 480:	08 95       	ret
	case LED1:
#if(LED1_CONNECTION==SOURCE)
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	67 e0       	ldi	r22, 0x07	; 7
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_Write_Channel>
#else
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_LOW);
#endif
		break;
 48c:	08 95       	ret
	case LED2:
#if(LED2_CONNECTION==SOURCE)
		Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_HIGH);
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	63 e0       	ldi	r22, 0x03	; 3
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_Write_Channel>
 498:	08 95       	ret

0000049a <Led_OFF>:
	}
}

void Led_OFF(led_id_t led)
{
	switch (led) {
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	51 f0       	breq	.+20     	; 0x4b2 <Led_OFF+0x18>
 49e:	18 f0       	brcs	.+6      	; 0x4a6 <Led_OFF+0xc>
 4a0:	82 30       	cpi	r24, 0x02	; 2
 4a2:	69 f0       	breq	.+26     	; 0x4be <Led_OFF+0x24>
 4a4:	08 95       	ret
	case LED0:
#if(LED0_CONNECTION==SOURCE)
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	62 e0       	ldi	r22, 0x02	; 2
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_Write_Channel>
#else
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_HIGH);
#endif
		break;
 4b0:	08 95       	ret

	case LED1:
#if(LED1_CONNECTION==SOURCE)
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_LOW);
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	67 e0       	ldi	r22, 0x07	; 7
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_Write_Channel>
#else
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
#endif
		break;
 4bc:	08 95       	ret

	case LED2:
#if(LED2_CONNECTION==SOURCE)
		Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	63 e0       	ldi	r22, 0x03	; 3
 4c2:	83 e0       	ldi	r24, 0x03	; 3
 4c4:	0e 94 ab 00 	call	0x156	; 0x156 <Dio_Write_Channel>
 4c8:	08 95       	ret

000004ca <main>:


void main()

{
WDT_Int();
 4ca:	0e 94 08 02 	call	0x410	; 0x410 <WDT_Int>
WDT_Start();
 4ce:	0e 94 0c 02 	call	0x418	; 0x418 <WDT_Start>
	Led_Init();
 4d2:	0e 94 16 02 	call	0x42c	; 0x42c <Led_Init>
Led_ON(LED0);
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 35 02 	call	0x46a	; 0x46a <Led_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4dc:	2f e9       	ldi	r18, 0x9F	; 159
 4de:	86 e8       	ldi	r24, 0x86	; 134
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	21 50       	subi	r18, 0x01	; 1
 4e4:	80 40       	sbci	r24, 0x00	; 0
 4e6:	90 40       	sbci	r25, 0x00	; 0
 4e8:	e1 f7       	brne	.-8      	; 0x4e2 <main+0x18>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <main+0x22>
 4ec:	00 00       	nop
_delay_ms(500);
Led_OFF(LED0);
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	0e 94 4d 02 	call	0x49a	; 0x49a <Led_OFF>
 4f4:	2f e9       	ldi	r18, 0x9F	; 159
 4f6:	86 e8       	ldi	r24, 0x86	; 134
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	80 40       	sbci	r24, 0x00	; 0
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <main+0x30>
 502:	00 c0       	rjmp	.+0      	; 0x504 <main+0x3a>
 504:	00 00       	nop
 506:	ff cf       	rjmp	.-2      	; 0x506 <main+0x3c>

00000508 <_exit>:
 508:	f8 94       	cli

0000050a <__stop_program>:
 50a:	ff cf       	rjmp	.-2      	; 0x50a <__stop_program>
